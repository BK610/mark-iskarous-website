---
export const prerender = true;

import Publication from "@/components/pageContent/publications/Publication.astro";

const { category } = Astro.props;

import { sanityClient } from "sanity:client";
import type { SanityDocument } from "@sanity/client";

// Note $category as a param in the query, if provided
const query = category
  ? `*[_type == "publicationCategory" && _id == $category][0]
      {"publications": *[_type == "publication" && references(^._id)]
        {_id, title, tagline, abstract, link, "file": file.asset->url, order}
      }`
  : `*[_type == "publication"]
      {_id, title, tagline, abstract, link, "file": file.asset->url, order}`;

const queryResults: SanityDocument = await sanityClient.fetch(
  query,
  // If category is provided, pass it as a param to the GROQ query
  category ? { category } : {},
);

// Because the query results are structured differently depending on if a
// category is provided, publications are either the entire response or just
// one field
const publications = category ? queryResults.publications : queryResults;
---

<section class="w-full">
  <ol class="max-w-3xl mx-auto flex flex-col gap-4">
    {
      publications
        .sort((a: SanityDocument, b: SanityDocument) => b.order - a.order)
        .map((publication: SanityDocument, key: number) => (
          <li>
            <Publication
              id={publication._id}
              title={publication.title}
              abstract={publication.abstract}
              tagline={publication.tagline}
              link={publication.link}
              file={publication.file}
              key={key}
            />
          </li>
        ))
    }
  </ol>
</section>
