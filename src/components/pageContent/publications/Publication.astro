---
export const prerender = true;

const { id, title, taglineBlock, abstract, link, file } = Astro.props;

import Card from "@/components/global/Card.astro";
import Prose from "@/components/global/Prose.astro";
import { PortableText } from "astro-portabletext";
---

<Card className="toggle p-4" clickable id={encodeURIComponent(id)}>
  <div class="flex flex-col md:flex-row gap-2 pb-4 md:pb-2">
    <h2 class="w-full font-serif font-semibold text-xl">{title}</h2>
    <div
      class="grow flex flex-row md:flex-col md:min-w-24 gap-2 md:gap-1 md:place-self-center"
    >
      {
        link ? (
          <a
            class="w-1/2 md:w-auto grow px-2 py-2 rounded-md text-center text-sm text-nowrap
        text-neutral-50
        border border-neutral-800 bg-neutral-800 hover:bg-neutral-600 hover:shadow-md"
            href={link}
            target="_blank"
          >
            <b>Website →</b>
          </a>
        ) : null
      }
      {
        file ? (
          <a
            class="w-1/2 md:w-auto grow px-2 py-2 rounded-md text-center text-sm text-nowrap
        border border-neutral-800 hover:bg-neutral-100 hover:shadow-md"
            href={`${file}?dl=`}
            download
          >
            <b>Paper →</b>
          </a>
        ) : null
      }
    </div>
  </div>
  <Prose class="max-w-none text-sm text-black leading-5">
    <PortableText value={taglineBlock} />
  </Prose>
  <span class="w-fit mx-auto text-neutral-600 pt-2"> ⬇︎ </span>
  <div class="collapsible-content collapsed flex flex-col gap-2">
    <h3 class="text-lg font-semibold">Abstract</h3>
    <PortableText value={abstract} />
  </div>
</Card>

<script>
  // Client-side JavaScript to handle the toggle functionality
  document.addEventListener("DOMContentLoaded", () => {
    const toggleBtns = document.querySelectorAll(".toggle");

    toggleBtns.forEach((btn) => {
      // Add click handlers to links to stop propagation
      // Note: Only applies to links within the publication
      const links = btn.querySelectorAll("a");
      links.forEach((link) => {
        link.addEventListener("click", (e) => {
          e.stopPropagation();
        });
      });

      btn.addEventListener("click", (event) => {
        const content = btn.lastElementChild;
        content?.classList.toggle("collapsed");
      });
    });
  });
</script>

<style>
  .collapsible-content {
    interpolate-size: allow-keywords;
    height: auto;
    overflow: hidden;
    transition: height 0.2s ease-in-out;
  }

  .collapsible-content.collapsed {
    height: 0px;
  }
</style>
